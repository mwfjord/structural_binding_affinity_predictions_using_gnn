Using GPU
Regenerating dataset...
Regenerating dataset...
Regenerating dataset...
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py:145: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(os.path.join(self.processed_dir,
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py:104: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler()
Training:   0%|                                                                                                                                                          | 0/18 [00:00<?, ?it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:216: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
Training:  89%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                | 16/18 [00:01<00:00, 18.65it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
Validation:   0%|                                                                                                                                                         | 0/3 [00:00<?, ?it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([6])) that is different to the input size (torch.Size([6, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
Traceback (most recent call last):                                                                                                                                                              
Epoch 1: Train Loss = 629381155.4638, Val Loss = 743057045.3333
Epoch 2: Train Loss = 628622991.7124, Val Loss = 740328512.0000
Epoch 3: Train Loss = 729084502.2222, Val Loss = 735664000.0000
Epoch 4: Train Loss = 620894354.1111, Val Loss = 726507114.6667
Epoch 5: Train Loss = 606451545.9931, Val Loss = 708382453.3333
Epoch 6: Train Loss = 604401119.1111, Val Loss = 698099861.3333
Epoch 7: Train Loss = 702598025.7778, Val Loss = 689653738.6667
Epoch 8: Train Loss = 576672678.9722, Val Loss = 684669898.6667
Epoch 9: Train Loss = 571861181.2500, Val Loss = 682892288.0000
Epoch 10: Train Loss = 632560948.4444, Val Loss = 682600480.0000
Epoch 11: Train Loss = 652342403.5556, Val Loss = 645368362.6667
Epoch 12: Train Loss = 518425761.7778, Val Loss = 589929184.0000
Epoch 13: Train Loss = 464288931.4306, Val Loss = 531348693.3333
Epoch 14: Train Loss = 442101889.7778, Val Loss = 501409930.6667
Epoch 15: Train Loss = 499240669.3333, Val Loss = 492642912.0000
Epoch 16: Train Loss = 477084321.7778, Val Loss = 491702698.6667
Epoch 17: Train Loss = 414913681.3333, Val Loss = 492108704.0000
Epoch 18: Train Loss = 410025707.1111, Val Loss = 492691466.6667
Epoch 19: Train Loss = 488273121.7778, Val Loss = 490832192.0000
Epoch 20: Train Loss = 410274675.5556, Val Loss = 490426058.6667
Epoch 21: Train Loss = 403957706.3889, Val Loss = 490167264.0000
Epoch 22: Train Loss = 429321159.1111, Val Loss = 490273546.6667
Epoch 23: Train Loss = 423602136.8889, Val Loss = 490147360.0000
Epoch 24: Train Loss = 441547864.0000, Val Loss = 490423328.0000
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 258, in <module>
    main()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 254, in main
    trainer.run()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 178, in run
    train_loss = self.train_epoch(epoch)
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 119, in train_epoch
    for batch_idx, data in enumerate(tqdm(self.train_loader, desc="Training", leave=False)):
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/tqdm/std.py", line 1181, in __iter__
    for obj in iterable:
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 673, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 55, in fetch
    return self.collate_fn(data)
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/loader/dataloader.py", line 27, in __call__
    return Batch.from_data_list(
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/data/batch.py", line 97, in from_data_list
    batch, slice_dict, inc_dict = collate(
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/data/collate.py", line 109, in collate
    value, slices, incs = _collate(attr, values, data_list, stores,
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/data/collate.py", line 205, in _collate
    value = torch.cat(values, dim=cat_dim or 0, out=out)
KeyboardInterrupt
