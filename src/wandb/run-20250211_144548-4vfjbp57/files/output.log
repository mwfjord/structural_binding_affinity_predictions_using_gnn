Using GPU
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py:181: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(os.path.join(self.processed_dir,
Sample data:  Data(x=[128, 2048], edge_index=[2, 1268], y=6.079945087432861)
Training:   0%|                                                                                                                                            | 0/18 [00:00<?, ?epoch/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:216: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
Validation:   0%|                                                                                                                                              | 0/3 [00:00<?, ?it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([6])) that is different to the input size (torch.Size([6, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
                                                                                                                                                                                     
Epoch 10: Train Loss = 6.0099, Val Loss = 5.4180
Epoch 20: Train Loss = 6.2282, Val Loss = 5.3999
Epoch 30: Train Loss = 6.1880, Val Loss = 5.4107
Epoch 40: Train Loss = 6.0238, Val Loss = 5.4554
Epoch 50: Train Loss = 6.3055, Val Loss = 5.3974
Epoch 60: Train Loss = 6.4483, Val Loss = 5.5308
Epoch 70: Train Loss = 6.0299, Val Loss = 5.4015
Epoch 80: Train Loss = 6.5494, Val Loss = 5.8428
Epoch 90: Train Loss = 6.1483, Val Loss = 5.4446
Epoch 100: Train Loss = 6.3807, Val Loss = 5.7180
