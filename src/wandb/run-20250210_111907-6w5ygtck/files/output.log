Using GPU
Regenerating dataset...
Regenerating dataset...
Regenerating dataset...
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py:145: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(os.path.join(self.processed_dir,
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py:104: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler()
Training:   0%|                                                                                                                                                          | 0/18 [00:00<?, ?it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:216: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
Training:  94%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉        | 17/18 [00:02<00:00,  8.06it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
Validation:  67%|████████████████████████████████████████████████████████████████████████████████████████████████▋                                                | 2/3 [00:00<00:00, 17.59it/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([6])) that is different to the input size (torch.Size([6, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
                                                                                                                                                                                                
Epoch 1: Train Loss = 629440529.3333, Val Loss = 741215946.6667
Epoch 2: Train Loss = 618420682.9504, Val Loss = 699207946.6667
Epoch 3: Train Loss = 543096681.8889, Val Loss = 550077621.3333
Epoch 4: Train Loss = 409320528.3333, Val Loss = 490079936.0000
Epoch 5: Train Loss = 465812629.3333, Val Loss = 490055850.6667
Epoch 6: Train Loss = 416857385.7778, Val Loss = 491359744.0000
Epoch 7: Train Loss = 446462147.5556, Val Loss = 490585877.3333
Epoch 8: Train Loss = 489520938.6667, Val Loss = 490768394.6667
Epoch 9: Train Loss = 405952865.5000, Val Loss = 490543552.0000
Epoch 10: Train Loss = 405365314.6667, Val Loss = 490531509.3333
Epoch 11: Train Loss = 408408496.0000, Val Loss = 494370549.3333
Epoch 12: Train Loss = 406721397.7778, Val Loss = 498006741.3333
Epoch 13: Train Loss = 418038160.0000, Val Loss = 489936373.3333
Epoch 14: Train Loss = 418834369.7778, Val Loss = 491202005.3333
Epoch 15: Train Loss = 408238240.2222, Val Loss = 496656213.3333
Epoch 16: Train Loss = 415895181.3333, Val Loss = 492775872.0000
Epoch 17: Train Loss = 414325296.8889, Val Loss = 490571946.6667
Epoch 18: Train Loss = 497076709.3333, Val Loss = 489975989.3333
Epoch 19: Train Loss = 402113637.5486, Val Loss = 493352160.0000
Epoch 20: Train Loss = 405145323.5556, Val Loss = 490675818.6667
Epoch 21: Train Loss = 469632266.6667, Val Loss = 491982677.3333
Epoch 22: Train Loss = 406181599.1111, Val Loss = 491227520.0000
Epoch 23: Train Loss = 405163175.0000, Val Loss = 495702005.3333
Epoch 24: Train Loss = 456907720.8889, Val Loss = 493615114.6667
Epoch 25: Train Loss = 407136584.0000, Val Loss = 492013066.6667
Epoch 26: Train Loss = 430550680.8889, Val Loss = 492983808.0000
Epoch 27: Train Loss = 398053583.6667, Val Loss = 492703765.3333
Epoch 28: Train Loss = 405979349.7778, Val Loss = 492691402.6667
Epoch 29: Train Loss = 412238721.7778, Val Loss = 492609632.0000
Epoch 30: Train Loss = 398943841.1667, Val Loss = 492618272.0000
Epoch 31: Train Loss = 475901680.0000, Val Loss = 491795338.6667
Epoch 32: Train Loss = 417331490.3889, Val Loss = 492278378.6667
Epoch 33: Train Loss = 433851142.2222, Val Loss = 490731338.6667
Epoch 34: Train Loss = 416880220.5000, Val Loss = 489681280.0000
Epoch 35: Train Loss = 412504067.0833, Val Loss = 494913493.3333
Epoch 36: Train Loss = 481046871.1111, Val Loss = 493603829.3333
Epoch 37: Train Loss = 405237311.6667, Val Loss = 489711978.6667
Epoch 38: Train Loss = 440105184.8889, Val Loss = 494294389.3333
Epoch 39: Train Loss = 415062708.4444, Val Loss = 489614762.6667
Epoch 40: Train Loss = 402581146.0278, Val Loss = 493094421.3333
Epoch 41: Train Loss = 409761193.7778, Val Loss = 495434432.0000
Epoch 42: Train Loss = 482558597.3333, Val Loss = 492682613.3333
Epoch 43: Train Loss = 441840874.6667, Val Loss = 490569525.3333
Epoch 44: Train Loss = 477420417.7778, Val Loss = 490158282.6667
Epoch 45: Train Loss = 402411909.0000, Val Loss = 494140789.3333
Epoch 46: Train Loss = 413958404.0000, Val Loss = 492379296.0000
Epoch 47: Train Loss = 401405726.4444, Val Loss = 491945898.6667
Epoch 48: Train Loss = 470841927.1111, Val Loss = 489950272.0000
Epoch 49: Train Loss = 403364725.2778, Val Loss = 489337706.6667
Epoch 50: Train Loss = 408638539.5556, Val Loss = 490046581.3333
Epoch 51: Train Loss = 436533859.5556, Val Loss = 491385418.6667
Epoch 52: Train Loss = 469718241.7778, Val Loss = 492312554.6667
Epoch 53: Train Loss = 500053968.0000, Val Loss = 493016522.6667
Epoch 54: Train Loss = 414923424.8889, Val Loss = 490200725.3333
Epoch 55: Train Loss = 412942176.0000, Val Loss = 490666560.0000
Epoch 56: Train Loss = 439557088.8889, Val Loss = 492708885.3333
Epoch 57: Train Loss = 406501917.3333, Val Loss = 493954293.3333
Epoch 58: Train Loss = 474045729.7778, Val Loss = 491639370.6667
Epoch 59: Train Loss = 442536956.4444, Val Loss = 489973472.0000
Epoch 60: Train Loss = 420056080.0000, Val Loss = 489601194.6667
Epoch 61: Train Loss = 405606406.8889, Val Loss = 489336533.3333
Epoch 62: Train Loss = 425537136.8889, Val Loss = 489379392.0000
Epoch 63: Train Loss = 404913641.3333, Val Loss = 489354666.6667
Epoch 64: Train Loss = 408914561.1111, Val Loss = 489688938.6667
Epoch 65: Train Loss = 428026731.5556, Val Loss = 489764202.6667
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 258, in <module>
    main()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 254, in main
    trainer.run()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 178, in run
    train_loss = self.train_epoch(epoch)
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 133, in train_epoch
    self.scaler.step(self.optimizer)
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/amp/grad_scaler.py", line 454, in step
    retval = self._maybe_opt_step(optimizer, optimizer_state, *args, **kwargs)
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/amp/grad_scaler.py", line 351, in _maybe_opt_step
    if not sum(v.item() for v in optimizer_state["found_inf_per_device"].values()):
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/amp/grad_scaler.py", line 351, in <genexpr>
    if not sum(v.item() for v in optimizer_state["found_inf_per_device"].values()):
KeyboardInterrupt
