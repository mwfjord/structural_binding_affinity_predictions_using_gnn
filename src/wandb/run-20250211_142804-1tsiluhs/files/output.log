Using GPU
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py:180: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(os.path.join(self.processed_dir,
2048
/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py:105: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler()
Training:   0%|                                                                                                                                            | 0/18 [00:00<?, ?epoch/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
This is the data:  DataBatch(x=[2948, 2048], edge_index=[2, 0], y=[16], batch=[2948], ptr=[17])
  return F.mse_loss(input, target, reduction=self.reduction)
/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:216: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
Training:  94%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋       | 17/18 [00:01<00:00, 23.41epoch/s]/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/nn/modules/loss.py:538: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
This is the data:  DataBatch(x=[2928, 2048], edge_index=[2, 0], y=[16], batch=[2928], ptr=[17])
This is the data:  DataBatch(x=[2868, 2048], edge_index=[2, 0], y=[16], batch=[2868], ptr=[17])
This is the data:  DataBatch(x=[2728, 2048], edge_index=[2, 0], y=[16], batch=[2728], ptr=[17])
This is the data:  DataBatch(x=[2208, 2048], edge_index=[2, 0], y=[16], batch=[2208], ptr=[17])
This is the data:  DataBatch(x=[2868, 2048], edge_index=[2, 0], y=[16], batch=[2868], ptr=[17])
This is the data:  DataBatch(x=[2328, 2048], edge_index=[2, 0], y=[16], batch=[2328], ptr=[17])
This is the data:  DataBatch(x=[2608, 2048], edge_index=[2, 0], y=[16], batch=[2608], ptr=[17])
This is the data:  DataBatch(x=[2508, 2048], edge_index=[2, 0], y=[16], batch=[2508], ptr=[17])
This is the data:  DataBatch(x=[2908, 2048], edge_index=[2, 0], y=[16], batch=[2908], ptr=[17])
This is the data:  DataBatch(x=[2908, 2048], edge_index=[2, 0], y=[16], batch=[2908], ptr=[17])
This is the data:  DataBatch(x=[2508, 2048], edge_index=[2, 0], y=[16], batch=[2508], ptr=[17])
This is the data:  DataBatch(x=[2828, 2048], edge_index=[2, 0], y=[16], batch=[2828], ptr=[17])
This is the data:  DataBatch(x=[3208, 2048], edge_index=[2, 0], y=[16], batch=[3208], ptr=[17])
This is the data:  DataBatch(x=[2868, 2048], edge_index=[2, 0], y=[16], batch=[2868], ptr=[17])
This is the data:  DataBatch(x=[2948, 2048], edge_index=[2, 0], y=[16], batch=[2948], ptr=[17])
This is the data:  DataBatch(x=[3148, 2048], edge_index=[2, 0], y=[16], batch=[3148], ptr=[17])
This is the data:  DataBatch(x=[148, 2048], edge_index=[2, 0], y=[1], batch=[148], ptr=[2])
  return F.mse_loss(input, target, reduction=self.reduction)
Traceback (most recent call last):                                                                                                                                                   
This is the data:  DataBatch(x=[3028, 2048], edge_index=[2, 0], y=[16], batch=[3028], ptr=[17])
This is the data:  DataBatch(x=[3488, 2048], edge_index=[2, 0], y=[16], batch=[3488], ptr=[17])
This is the data:  DataBatch(x=[2708, 2048], edge_index=[2, 0], y=[16], batch=[2708], ptr=[17])
This is the data:  DataBatch(x=[2708, 2048], edge_index=[2, 0], y=[16], batch=[2708], ptr=[17])
This is the data:  DataBatch(x=[2408, 2048], edge_index=[2, 0], y=[16], batch=[2408], ptr=[17])
This is the data:  DataBatch(x=[2948, 2048], edge_index=[2, 0], y=[16], batch=[2948], ptr=[17])
This is the data:  DataBatch(x=[2708, 2048], edge_index=[2, 0], y=[16], batch=[2708], ptr=[17])
This is the data:  DataBatch(x=[3008, 2048], edge_index=[2, 0], y=[16], batch=[3008], ptr=[17])
This is the data:  DataBatch(x=[3268, 2048], edge_index=[2, 0], y=[16], batch=[3268], ptr=[17])
This is the data:  DataBatch(x=[2668, 2048], edge_index=[2, 0], y=[16], batch=[2668], ptr=[17])
This is the data:  DataBatch(x=[2568, 2048], edge_index=[2, 0], y=[16], batch=[2568], ptr=[17])
This is the data:  DataBatch(x=[2768, 2048], edge_index=[2, 0], y=[16], batch=[2768], ptr=[17])
This is the data:  DataBatch(x=[2508, 2048], edge_index=[2, 0], y=[16], batch=[2508], ptr=[17])
This is the data:  DataBatch(x=[2888, 2048], edge_index=[2, 0], y=[16], batch=[2888], ptr=[17])
This is the data:  DataBatch(x=[2788, 2048], edge_index=[2, 0], y=[16], batch=[2788], ptr=[17])
This is the data:  DataBatch(x=[2388, 2048], edge_index=[2, 0], y=[16], batch=[2388], ptr=[17])
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 264, in <module>
    main()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 260, in main
    trainer.run()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 183, in run
    train_loss = self.train_epoch(epoch)
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 120, in train_epoch
    for batch_idx, data in enumerate(tqdm(self.train_loader, desc="Training", leave=False, unit="epoch", total=num_batches)):
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/tqdm/std.py", line 1181, in __iter__
    for obj in iterable:
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 673, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/data/dataset.py", line 291, in __getitem__
    data = self.get(self.indices()[idx])
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py", line 180, in get
    data = torch.load(os.path.join(self.processed_dir,
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1097, in load
    return _load(
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1525, in _load
    result = unpickler.load()
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1492, in persistent_load
    typed_storage = load_tensor(dtype, nbytes, key, _maybe_decode_ascii(location))
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1457, in load_tensor
    storage = zip_file.get_storage_from_record(name, numel, torch.UntypedStorage)._typed_storage()._untyped_storage
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 264, in <module>
    main()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 260, in main
    trainer.run()
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 183, in run
    train_loss = self.train_epoch(epoch)
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/train.py", line 120, in train_epoch
    for batch_idx, data in enumerate(tqdm(self.train_loader, desc="Training", leave=False, unit="epoch", total=num_batches)):
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/tqdm/std.py", line 1181, in __iter__
    for obj in iterable:
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 673, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 52, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch_geometric/data/dataset.py", line 291, in __getitem__
    data = self.get(self.indices()[idx])
  File "/home/marcus/programming/structural_binding_affinity_predictions_using_gnn/src/proteinDNADataset.py", line 180, in get
    data = torch.load(os.path.join(self.processed_dir,
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1097, in load
    return _load(
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1525, in _load
    result = unpickler.load()
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1492, in persistent_load
    typed_storage = load_tensor(dtype, nbytes, key, _maybe_decode_ascii(location))
  File "/home/marcus/programming/gnn-protein-dna/lib/python3.10/site-packages/torch/serialization.py", line 1457, in load_tensor
    storage = zip_file.get_storage_from_record(name, numel, torch.UntypedStorage)._typed_storage()._untyped_storage
KeyboardInterrupt
